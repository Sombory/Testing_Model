# -*- coding: utf-8 -*-
"""0.Diagnóstico de modelos Scikit-plot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3Lwl1YX6oNEgh98ShnqjTXCLxv1c_NQ

# Scikit - plot
Construido sobre nuestro amigo matplotlib!
"""

pip install! scikit-plot

"""## Primeros pasos"""

import matplotlib.pyplot as plt

from sklearn.datasets import load_breast_cancer
data = load_breast_cancer()

X=data.data

y=data.target

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=41)

from sklearn.ensemble import RandomForestClassifier
random_forest_clf = RandomForestClassifier(n_estimators=5, max_depth=5, random_state=1)

from sklearn.model_selection import cross_val_predict
predictions = cross_val_predict(random_forest_clf, X_train, y_train)

predictions

import scikitplot as skplt
skplt.metrics.plot_confusion_matrix(y_train, predictions, normalize=True)
plt.show()

predictions_proba = cross_val_predict(random_forest_clf, X_train, y_train,method='predict_proba')

"""inally, let’s show an example wherein wedon’tuse Scikit-learn."""

predictions_proba

import matplotlib.pyplot as plt
import scikitplot as skplt
skplt.metrics.plot_precision_recall(y_train, predictions_proba)
plt.legend(loc=0,prop={'size':10})
# detalles de cómo cambiar la leyenda en matplotlib https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html
plt.show()

"""Tenemos disponibles varios módulos:


*   Metrics Module  
*   Estimators Module 
*   Clusterer Module 
*   Decomposition Module

## Módulo de métricas

¿Se acuerdan de la curva ROC?
"""

skplt.metrics.plot_roc(y_train, predictions_proba)
plt.show()

"""Precisión y recall..."""

skplt.metrics.plot_precision_recall(y_train, predictions_proba)
plt.show()

"""Silhouttes"""

import scikitplot as skplt
from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=4, random_state=1)
cluster_labels = kmeans.fit_predict(X)
skplt.metrics.plot_silhouette(X, cluster_labels)
plt.show()

"""Calibration plot"""

probas_list = [predictions_proba] #puedo pasarle una lista con los arrays de probabilidades de modelos distintos..:) pero sólo funciona para el caso de clasificación binaria..
skplt.metrics.plot_calibration_curve(y_train,probas_list)

"""Cumulative gain chart"""

skplt.metrics.plot_cumulative_gain(y_train, predictions_proba)
plt.show()

"""Lift curve"""

skplt.metrics.plot_lift_curve(y_train, predictions_proba)
plt.show()

"""### Estimator Module

Learning curve
"""

import scikitplot as skplt
skplt.estimators.plot_learning_curve(random_forest_clf, X_train, y_train)
plt.show()

"""Feature Importance"""

data.feature_names

import scikitplot as skplt
skplt.estimators.plot_feature_importances(random_forest_clf.fit(X_train,y_train),feature_names=data.feature_names)
plt.show()

"""### Clusterer Module"""

skplt.cluster.plot_elbow_curve(KMeans(random_state=1),X,cluster_ranges=range(2, 20),figsize=(8,6));

"""### Decomposition Module"""

import scikitplot as skplt
from sklearn.decomposition import PCA
pca = PCA(random_state=1)
pca.fit(X)
skplt.decomposition.plot_pca_component_variance(pca)
plt.show()

import scikitplot as skplt
pca = PCA(random_state=1)
pca.fit(X)
skplt.decomposition.plot_pca_2d_projection(pca, X, y)
plt.show()